{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ALCL",
  "patterns": [
    { "include": "#meta" },
    { "include": "#class-declaration" },
    { "include": "#variable-declaration" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#functions" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#identifiers" },
    { "include": "#comments" }
  ],
  "repository": {
    "class-declaration": {
      "patterns": [
        {
          "name": "meta.class.declaration.alcl",
          "match": "\\b(class|extends)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.control.alcl" },
            "2": { "name": "support.class.builtin.alcl support.package.alcl entity.name.type.alcl" }
          }
        }
      ]
    },
    "meta": {
      "patterns": [
        {
          "name": "storage.modifier.metadata.alcl",
          "match": "#(?:native_header|native_function|ctype|inject_c|assert_type|log_type|extern|no_remap)"
        },
        {
          "name": "keyword.import.alcl",
          "match": "\\bneed\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.alcl",
          "match": "\\b(while|for|return|break|continue|if|else|in|of|as|override|var)\\b"
        }
      ]
    },
    "variable-declaration": {
      "patterns": [
      {
        "begin": "\\b(var)\\b(\\s+)([A-Za-z_][A-Za-z0-9_]*)\\s*:\\s*",
        "beginCaptures": {
        "1": { "name": "keyword.control.alcl" },
        "3": { "name": "variable.other.local.alcl" }
        },
        "end": "(?=\\s*(=|;|$))",
        "patterns": [
        {
          "name": "support.class.builtin.alcl support.package.alcl entity.name.type.alcl",
          "match": "(?<=\\b(var)\\b\\s+)(?:\\[[A-Za-z0-9]+\\])?[A-Za-z0-9]+"
        }
        ]
      }
      ]
    },
    "strings": {
      "name": "string.quoted.double.alcl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.alcl",
          "match": "\\\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "storage.type.function.alcl",
          "match": "\\bfunc\\b"
        },
        {
          "name": "entity.name.function.alcl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "variable.parameter.alcl",
          "match": "\\bfunc\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*\\([^\\)]*\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:|,|\\))"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "constant.numeric.alcl",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.language.alcl",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.alcl",
          "match": "="
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.local.alcl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.alcl",
          "match": "//.*"
        }
      ]
    }
  },
  "scopeName": "source.alcl"
}
