var totalTests: Int32 = 0;
var passingTests: Int32 = 0;
var failingTests: Int32 = 0;

#native_function
#native_header "stdio.h"
#native_header "stdlib.h"
func alcl_test_float(name: CString, a: Float64, b: Float64): Void {
    double error = 0.0000000000001;
    totalTests = totalTests + 1;
    if (a < b - error || a > b + error) {
        failingTests = failingTests + 1;
        printf("FAIL: %s (%f != %f)\n", name, a, b);
    } else {
        passingTests = passingTests + 1;
        printf("PASS: %s\n", name);
    }
}

#native_function
#native_header "stdio.h"
#native_header "stdlib.h"
func alcl_test_int(name: CString, a: Int64, b: Int64): Void {
    totalTests = totalTests + 1;
    if (a != b) {
        failingTests = failingTests + 1;
        printf("FAIL: %s (%llu != %llu)\n", name, a, b);
    } else {
        passingTests = passingTests + 1;
        printf("PASS: %s\n", name);
    }
}

#native_function
#native_header "stdio.h"
#native_header "stdlib.h"
#native_header "stdbool.h"
func alcl_test_bool(name: CString, v: Bool, expected: Bool): Void {
    totalTests = totalTests + 1;
    if (v != expected) {
        failingTests = failingTests + 1;
        printf("FAIL: %s\n", name);
    } else {
        passingTests = passingTests + 1;
        printf("PASS: %s\n", name);
    }
}

#native_function
#native_header "stdio.h"
#native_header "stdlib.h"
#native_header "string.h"
func alcl_test_string(name: CString, a: CString, b: CString): Void {
    totalTests = totalTests + 1;
    if (strcmp(a, b) != 0) {
        failingTests = failingTests + 1;
        printf("FAIL: %s (%s != %s)\n", name, a, b);
    } else {
        passingTests = passingTests + 1;
        printf("PASS: %s\n", name);
    }
}

#native_function
#native_header "stdio.h"
func alcl_test_summary(): Int32 {
    printf("\n");
    printf("Total tests: %d\n", totalTests);
    printf("Passing tests: %d\n", passingTests);
    printf("Failing tests: %d\n", failingTests);

    return failingTests != 0;
}

func test_comparisons(): Void {
    // Test if statement
    var x: Int32 = 10;
    var y: Int32 = 5;
    var result: Int32 = 0;
    if (x > y) {
        result = 1;
    }
    alcl_test_int("If Statement", result, 1);

    // Test else statement
    x = 3;
    y = 5;
    result = 0;
    if (x > y) {
        result = 1;
    } else {
        result = -1;
    }
    alcl_test_int("Else Statement", result, -1);

    // Test elseif statement
    x = 5;
    y = 5;
    result = 0;
    if (x > y) {
        result = 1;
    } else if (x == y) {
        result = 2;
    } else {
        result = -1;
    }
    alcl_test_int("Elseif Statement", result, 2);

    // Test nested if-else
    x = 10;
    y = 5;
    var z: Int32 = 15;
    result = 0;
    if (x > y) {
        if (z > x) {
            result = 3;
        } else {
            result = 4;
        }
    } else {
        result = -1;
    }
    alcl_test_int("Nested If-Else", result, 3);
}

func test_for(): Void {
    // TODO: when the analyser is implemented and for loops automatically declares the loop variables, remove these declarations.
    var i: Int32 = 0;
    var j: Int32 = 0;

    // Basic
    var counter: Int32 = 0;
    for (i = 0; i < 10; i = i + 1) {
        counter = counter + 1;
    }
    alcl_test_int("Basic for Loop", counter, 10);

    // Reverse
    counter = 0;
    for (i = 10; i > 0; i = i - 1) {
        counter = counter + 1;
    }
    alcl_test_int("Reverse for Loop", counter, 10);

    // Step of 2
    counter = 0;
    for (i = 0; i < 10; i = i + 2) {
        counter = counter + 1;
    }
    alcl_test_int("For Loop with Step 2", counter, 5);

    // Nested Loops
    counter = 0;
    for (i = 0; i < 5; i = i + 1) {
        for (j = 0; j < 5; j = j + 1) {
            counter = counter + 1;
        }
    }
    alcl_test_int("Nested For Loop", counter, 25);

    // Early Exit (break)
    counter = 0;
    for (i = 0; i < 10; i = i + 1) {
        if (i == 5) {
            break;
        }
        counter = counter + 1;
    }
    alcl_test_int("For Loop with Break", counter, 5);

    // Continue Statement
    counter = 0;
    for (i = 0; i < 10; i = i + 1) {
        if (i % 2 == 0) {
            continue;
        }
        counter = counter + 1;
    }
    alcl_test_int("For Loop with Continue", counter, 5);
}

func arithmetic(): Void {
    alcl_test_float("Arithmetic Addition", 5 + 3, 8);
    alcl_test_float("Arithmetic Subtraction", 10 - 3, 7);
    alcl_test_float("Arithmetic Multiplication", 4 * 2, 8);
    alcl_test_float("Arithmetic Division", 12 / 3, 4);
    alcl_test_float("Arithmetic Subtraction Double", 10 -- 3, 13);
}

func negative(): Void {
    alcl_test_float("Negative Addition", -5 + 3, -2);
    alcl_test_float("Negative Subtraction", 5 + (-3), 2);
    alcl_test_float("Negative Multiplication", -10 * 2, -20);
    alcl_test_float("Negative Division", 10 / -2, -5);
}

func large(): Void {
    alcl_test_float("Large Addition", 1000000 + 500000, 1500000);
    alcl_test_float("Large Subtraction", 1000000000 - 999999999, 1);
    alcl_test_float("Large Multiplication", 100000 * 1000, 100000000);
    alcl_test_float("Large Division", 1000000000 / 5000, 200000);
}

func division_by_zero(): Void {
//     assert_eq(10 / 0, 0);
//     assert_eq(0 / 0, 0);
}

func floating_point(): Void {
    alcl_test_float("Floating Point Addition", 10.5 + 3.5, 14);
    alcl_test_float("Floating Point Subtraction", 10.5 - 3.5, 7);
    alcl_test_float("Floating Point Multiplication", 10.5 * 3.5, 36.75);
    alcl_test_float("Floating Point Division", 10.5 / 3.5, 3);
}

func mixed(): Void {
    alcl_test_float("Mixed 1", 2 + 3 * 4, 14);
    alcl_test_float("Mixed 2", 6 - 4 / 2, 4);
    alcl_test_float("Mixed 3", 5 + 2 - 3 * 4, -5);
}

func int_and_float(): Void {
    alcl_test_float("Int and Float 1", 5 + 3.0, 8);
    alcl_test_float("Int and Float 2", 5.0 + 3, 8);
    alcl_test_float("Int and Float 3", 5 - 3.0, 2);
    alcl_test_float("Int and Float 4", 5.0 - 3, 2);
    alcl_test_float("Int and Float 5", 5 * 3.0, 15);
    alcl_test_float("Int and Float 6", 5.0 * 3, 15);
    alcl_test_float("Int and Float 7", 5 / 3.0, 1.6666666666666667);
    alcl_test_float("Int and Float 8", 5.0 / 3, 1.6666666666666667);
}

func order_of_operations(): Void {
    alcl_test_float("Order of Operations 1", 5 + 3 * 2, 11);
    alcl_test_float("Order of Operations 2", 5 * 3 + 2, 17);
}

func parentheses(): Void {
    alcl_test_float("Parentheses 1", (5 + 3) * 2, 16);
    alcl_test_float("Parentheses 2", 5 * (3 + 2), 25);
    alcl_test_float("Parentheses 3", 5 + (2 - 3) * 4, 1);
    alcl_test_float("Parentheses 4", 5 + 2 - 3 * 4, -5);
    alcl_test_float("Parentheses 5", 5 + 2 - (3 * 4), -5);
}

func binop_vs_unaryop() {
    alcl_test_float("Binop vs Unaryop 1", 5 + -3, 2);
    alcl_test_float("Binop vs Unaryop 2", 5 - -3, 8);
    alcl_test_float("Binop vs Unaryop 3", 5 * -3, -15);
    alcl_test_float("Binop vs Unaryop 4", 5.0 / -3.0, -1.6666666666666667);
}

func modulus(): Void {
    alcl_test_float("Modulus 1", 10 % 3, 1);
    alcl_test_float("Modulus 2", 25 % 4, 1);
}

func mixed_division_modulus(): Void {
    alcl_test_float("Mixed Division and Modulus 1", 10 / 3 * 3 + 10 % 3, 10);
}

func other() {
    alcl_test_float("Other 1", 10 + 5 * 2 - 20 / 4 + 3 * 6 - 8, 25);
    alcl_test_float("Other 2",  (1.0 / ((10.0) * 10.0)), 0.01);
}

func test_math(): Void {
    arithmetic();
    negative();
    large();
    division_by_zero();
    floating_point();
    mixed();
    order_of_operations();
    parentheses();
    modulus();
    mixed_division_modulus();
    binop_vs_unaryop();
    int_and_float();
    other();
}

func isPositiveNumber(num: Int32): Bool {
    return num > 0 ? true : false;
}

func test_ternary(): Void {
    // Ternary Leap year
    var year: Int32 = 1900;
    var isLeap: Bool = year % 4 == 0 ? (year % 100 != 0 || year % 400 == 0 ? true : false) : false;

    // Ternary Min/Max
    var a: Int32 = 10;
    var b: Int32 = 20;
    var min: Int32 = a < b ? a : b;
    var max: Int32 = a > b ? a : b;
    alcl_test_int("Ternary Min", min, 10);
    alcl_test_int("Ternary Max", max, 20);

    // Ternary Even/Odd Check
    var num: Int32 = 7;
    var is_even: CString = num % 2 == 0 ? "Even" : "Odd";
    alcl_test_string("Ternary Even/Odd", is_even, "Odd");

    // Ternary Positive/Negative/Zero
    var value: Int32 = -5;
    var status: CString = value > 0 ? "Positive" : (value < 0 ? "Negative" : "Zero");
    alcl_test_string("Ternary Pos/Neg/Zero", status, "Negative");

    // Nested Ternary check
    var score: Int32 = 85;
    var grade: CString = score >= 90 ? "A" : (score >= 80 ? "B" : (score >= 70 ? "C" : "F"));
    alcl_test_string("Ternary Grade", grade, "B");

    // Non-inline ternary
    var x: Int32 = 10;
    var y: Int32 = 20;
    var yLargerThanX: Bool = false;
    x < y ? yLargerThanX = true : yLargerThanX = false;
    alcl_test_bool("Ternary Non-inline", yLargerThanX, true);

    // Ternary with function call
    var isPositive: Bool = isPositiveNumber(5) == true ? true : false; // even though this is redundant, it's just for testing
    alcl_test_bool("Ternary Function Call", isPositive, true);

    // Ternary inside of function param
    alcl_test_bool("Ternary Function Param", isPositiveNumber(5 > 0 ? 5 : -5), true);
}

func test_while(): Void {
    // basic
    var i: Int32 = 0;
    while (i < 5) {
        i = i + 1;
    }
    alcl_test_int("Basic While Loop", i, 5);

    // complex
    var a: Int32 = 0;
    var b: Int32 = 10;
    while (a < 5 && b > 5) {
        a = a + 1;
        b = b - 1;
    }
    alcl_test_int("While Loop Complex Condition - a", a, 5);
    alcl_test_int("While Loop Complex Condition - b", b, 5);

    // While loop with break
    var sum: Int32 = 0;
    var count: Int32 = 0;
    while (count < 10) {
        if (count == 4) {
            break;
        }
        sum = sum + count;
        count = count + 1;
    }
    alcl_test_int("While Loop Break", sum, 6);

    // While loop with continue
    var evenSum: Int32 = 0;
    var n: Int32 = 0;
    while (n < 6) {
        n = n + 1;
        if (n % 2 != 0) {
            continue;
        }
        evenSum = evenSum + n;
    }
    alcl_test_int("While Loop Continue - Even Sum", evenSum, 12);
}

func main(): Int32 {
    test_math();
    test_while();
    test_comparisons();
    test_for();
    test_ternary();

    return alcl_test_summary();
}