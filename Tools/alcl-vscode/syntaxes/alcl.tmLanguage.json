{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ALCL",
  "patterns": [
    {
      "include": "#meta"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "meta": {
      "patterns": [
        {
          "name": "storage.modifier.metadata.alcl",
          "match": "#(?:native_header|native_function)"
        },
        {
          "name": "keyword.import.alcl",
          "match": "\\bneed\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.alcl",
          "match": "\\b(var|while|return|break|continue|if|else|in|of)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.class.builtin.alcl support.package.alcl entity.name.type.alcl",
          "match": "\\b(Void|CString|String|Byte|Bool|Float32|Float64|UInt32|UInt64|Int32|Int64)\\b"
        },
        {
          "name": "constant.language.alcl",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.alcl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.alcl",
          "match": "\\\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "storage.type.function.alcl",
          "match": "\\b(func)\\b"
        },
        {
          "name": "entity.name.function.alcl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "variable.parameter.alcl",
          "match": "(?<=\\bfunc\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*\\([^\\)]*)\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(:|,|\\)))"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "constant.numeric.alcl",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.alcl",
          "match": "\\s*="
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.local.alcl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.alcl",
          "match": "//.*"
        }
      ]
    }
  },
  "scopeName": "source.alcl"
}
